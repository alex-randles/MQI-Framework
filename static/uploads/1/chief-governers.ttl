@prefix rr: <http://www.w3.org/ns/r2rml#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix cidoc: <http://erlangen-crm.org/current/> .

@prefix b2022: <https://ont.beyond2022.ie/ontology#> .

<#DIB>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
		SELECT * FROM (SELECT ID, DIB FROM DATA) WHERE DIB IS NOT NULL;""" ] ;

	rr:subjectMap [
		rr:column "DIB" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:seeAlso ;
		rr:objectMap [ rr:column "DIB" ; rr:datatype xsd:anyURI ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:DIB ;
	] ;
.

<#ODNB>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
		SELECT * FROM (SELECT ID, ODNB FROM DATA) WHERE ODNB IS NOT NULL;""" ] ;

	rr:subjectMap [
		rr:column "ODNB" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:seeAlso ;
		rr:objectMap [ rr:column "ODNB" ; rr:datatype xsd:anyURI ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:ODNB ;
	] ;
.

<#SOURCE>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
		SELECT
			D.ID,
			CONCAT(D.SOURCE, ', pp. ' || E.PAGENUMBERS) AS REFERENCE
		FROM DATA D 
		LEFT OUTER JOIN 
		(
			WITH RECURSIVE SPLITTEDPAGENUMBERS (ID, PAGENUMBERS, REST) AS 
			( 
				SELECT ID, NULL, PAGENUMBERS || ';' FROM  (SELECT ID, PAGENUMBERS FROM DATA WHERE PAGENUMBERS IS NOT NULL) 
				UNION ALL 
				SELECT ID, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM SPLITTEDPAGENUMBERS WHERE REST <> '' 
			) SELECT DISTINCT ID, PAGENUMBERS FROM SPLITTEDPAGENUMBERS WHERE PAGENUMBERS IS NOT NULL
		) E ON D.ID = E.ID
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/reference/{REFERENCE}" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ 
			rr:column "REFERENCE" ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#Floruit>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
		SELECT 
		ID,
		IFNULL(NORMALISEDSURNAME, ID) AS NORMALISEDSURNAME,
		IFNULL(NORMALISEDFORENAME, '-') AS NORMALISEDFORENAME,
		IFNULL(CENTURY, '0000') AS CENTURY,
		DISCRIMINATOR		
		FROM DATA WHERE FLORUITLOWER IS NOT NULL;""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/floruit/{NORMALISEDSURNAME}_{NORMALISEDFORENAME}_{CENTURY}_{DISCRIMINATOR}" ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P4_has_time-span ;
		rr:objectMap [
			rr:parentTriplesMap <#FloruitSpan> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P12_occurred_in_the_presence_of ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Floruit ;
	] ;
.

<#FloruitSpan>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """SELECT ID, FLORUITLOWER, FLORUITUPPER FROM DATA WHERE FLORUITLOWER IS NOT NULL;""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/time-span/{FLORUITLOWER}_{FLORUITUPPER}" ;
		rr:class cidoc:E52_Time-Span ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P82a_begin_of_the_begin, cidoc:P81a_end_of_the_begin ;
		rr:objectMap [ rr:column "FLORUITLOWER" ; rr:datatype xsd:date ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P81b_begin_of_the_end, cidoc:P82b_end_of_the_end ;
		rr:objectMap [ rr:column "FLORUITUPPER"  ; rr:datatype xsd:date ; ] ;
	] ;
.

<#DateOfBirth>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
		SELECT 
		ID,
		IFNULL(NORMALISEDSURNAME, ID) AS NORMALISEDSURNAME,
		IFNULL(NORMALISEDFORENAME, '-') AS NORMALISEDFORENAME,
		IFNULL(CENTURY, '0000') AS CENTURY,
		DISCRIMINATOR,
		KBFATHER,			CASEWHEN(REGEXP_LIKE(KBFATHER, '^https://kb.beyond2022.ie', 'i'), KBFATHER, NULL) AS KBFATHERURI,
		KBMOTHER,			CASEWHEN(REGEXP_LIKE(KBMOTHER, '^https://kb.beyond2022.ie', 'i'), KBMOTHER, NULL) AS KBMOTHERURI,
		FROM DATA;""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/birth/{NORMALISEDSURNAME}_{NORMALISEDFORENAME}_{CENTURY}_{DISCRIMINATOR}" ;
		rr:class cidoc:E67_Birth ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P4_has_time-span ;
		rr:objectMap [
			rr:parentTriplesMap <#DateOfBirthTimeSpan> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P98_brought_into_life ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P11_had_participant, cidoc:P97_from_father ;
		rr:objectMap [
			rr:column "KBFATHERURI" ;
			rr:termType rr:IRI ;
		] ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "KBFATHER" ; rr:parent "ID" ; ] ;
		] ;
		rr:objectMap [
			rr:parentTriplesMap <#BLANKFATHERS> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P11_had_participant, cidoc:P96_by_mother ;
		rr:objectMap [
			rr:column "KBMOTHERURI" ;
			rr:termType rr:IRI ;
		] ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "KBMOTHER" ; rr:parent "ID" ; ] ;
		] ;
		rr:objectMap [
			rr:parentTriplesMap <#BLANKMOTHERS> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#BLANKFATHERS>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """SELECT 
		ID,
		CASEWHEN(REGEXP_LIKE(KBFATHER, '^http(s)?://'), KBFATHER, NULL) AS URI,
		CASEWHEN(REGEXP_LIKE(KBFATHER, '^http(s)?://'), NULL, KBFATHER) AS LABEL,
		FROM DATA
		WHERE KBFATHER NOT IN (SELECT ID FROM DATA)""" ] ;

	rr:subjectMap [
		rr:template "father-{ID}" ;
		rr:termType rr:BlankNode ;
		rr:class cidoc:E21_Person ;
	] ;
	
	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [
			rr:column "LABEL" ;
		] ;
	] ;
	
	rr:predicateObjectMap [
		rr:predicate rdfs:seeAlso ;
		rr:objectMap [
			rr:column "URI" ; rr:termType rr:IRI ;
		] ;
	] ;
.

<#BLANKMOTHERS>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """SELECT 
		ID,
		CASEWHEN(REGEXP_LIKE(KBMOTHER, '^http(s)?://'), KBMOTHER, NULL) AS URI,
		CASEWHEN(REGEXP_LIKE(KBMOTHER, '^http(s)?://'), NULL, KBMOTHER) AS LABEL,
		FROM DATA
		WHERE KBMOTHER NOT IN (SELECT ID FROM DATA)""" ] ;

	rr:subjectMap [
		rr:template "mother-{ID}" ;
		rr:termType rr:BlankNode ;
		rr:class cidoc:E21_Person ;
	] ;
	
	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [
			rr:column "LABEL" ;
		] ;
	] ;
	
	rr:predicateObjectMap [
		rr:predicate rdfs:seeAlso ;
		rr:objectMap [
			rr:column "URI" ; rr:termType rr:IRI ;
		] ;
	] ;
.

<#DateOfBirthTimeSpan>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """SELECT ID, DATEOFBIRTHLOWER, DATEOFBIRTHUPPER FROM DATA WHERE DATEOFBIRTHLOWER IS NOT NULL;""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/time-span/{DATEOFBIRTHLOWER}_{DATEOFBIRTHUPPER}" ;
		rr:class cidoc:E52_Time-Span ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P82a_begin_of_the_begin, cidoc:P81a_end_of_the_begin ;
		rr:objectMap [ rr:column "DATEOFBIRTHLOWER" ; rr:datatype xsd:date ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P81b_begin_of_the_end, cidoc:P82b_end_of_the_end ;
		rr:objectMap [ rr:column "DATEOFBIRTHUPPER" ; rr:datatype xsd:date ; ] ;
	] ;
.

<#DateOfDeath>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
		SELECT 
		ID,
		IFNULL(NORMALISEDSURNAME, ID) AS NORMALISEDSURNAME,
		IFNULL(NORMALISEDFORENAME, '-') AS NORMALISEDFORENAME,
		IFNULL(CENTURY, '0000') AS CENTURY,
		DISCRIMINATOR
		FROM DATA;""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/death/{NORMALISEDSURNAME}_{NORMALISEDFORENAME}_{CENTURY}_{DISCRIMINATOR}" ;
		rr:class cidoc:E69_Death ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P4_has_time-span ;
		rr:objectMap [
			rr:parentTriplesMap <#DateOfDeathTimeSpan> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P93_took_out_of_existence ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#DateOfDeathTimeSpan>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """SELECT ID, DATEOFDEATHLOWER, DATEOFDEATHUPPER FROM DATA WHERE DATEOFDEATHLOWER IS NOT NULL;""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/time-span/{DATEOFDEATHLOWER}_{DATEOFDEATHUPPER}" ;
		rr:class cidoc:E52_Time-Span ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P82a_begin_of_the_begin, cidoc:P81a_end_of_the_begin ;
		rr:objectMap [ rr:column "DATEOFDEATHLOWER" ; rr:datatype xsd:date ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P81b_begin_of_the_end, cidoc:P82b_end_of_the_end ;
		rr:objectMap [ rr:column "DATEOFDEATHUPPER" ; rr:datatype xsd:date ; ] ;
	] ;
.

<#NormalizedAppellationsCombined>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
		SELECT 
		S.ID, 
		S.NORMALISEDSURNAME,
		F.NORMALISEDFORENAME,
		FROM (
	    	WITH RECURSIVE SURNAMESPLITTED(ID, NORMALISEDSURNAME, REST) AS (
				SELECT ID, NULL, NORMALISEDSURNAME || ';' FROM (SELECT ID, NORMALISEDSURNAME FROM DATA WHERE NORMALISEDSURNAME IS NOT NULL) 
	  			UNION ALL
	  			SELECT ID, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM SURNAMESPLITTED WHERE REST <> ''
			) SELECT ID, NORMALISEDSURNAME FROM SURNAMESPLITTED WHERE NORMALISEDSURNAME IS NOT NULL) AS S 
		INNER JOIN (SELECT ID, NORMALISEDFORENAME FROM DATA) AS F ON S.ID = F.ID AND S.NORMALISEDSURNAME NOT LIKE ''""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/normalized-appellation-surname-forename/{NORMALISEDSURNAME}_{NORMALISEDFORENAME}" ;
		rr:class cidoc:E81_Actor_Appellation, cidoc:E41_Appellation ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ rr:template "{NORMALISEDSURNAME}, {NORMALISEDFORENAME}" ; rr:termType rr:Literal ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Name ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P139_has_alternative_form ;
		rr:objectMap [
			rr:parentTriplesMap <#ForenameSurnamevariantCombined> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.


<#NormalizedAppellationsForename>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """SELECT ID, NORMALISEDFORENAME FROM DATA WHERE NORMALISEDFORENAME IS NOT NULL AND NORMALISEDFORENAME NOT LIKE ''""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/normalized-appellation-forename/{NORMALISEDFORENAME}" ;
		rr:class cidoc:E81_Actor_Appellation, cidoc:E41_Appellation ; ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ rr:column "NORMALISEDFORENAME" ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Forename ;
	] ;
.

<#NormalizedAppellationsSurname>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
		WITH RECURSIVE SURNAMESPLITTED(ID, NORMALISEDSURNAME, REST) AS (
				SELECT ID, NULL, NORMALISEDSURNAME || ';' FROM (SELECT ID, NORMALISEDSURNAME FROM DATA WHERE NORMALISEDSURNAME IS NOT NULL) 
	  			UNION ALL
	  			SELECT ID, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM SURNAMESPLITTED WHERE REST <> ''
		) SELECT ID, NORMALISEDSURNAME FROM SURNAMESPLITTED WHERE NORMALISEDSURNAME IS NOT NULL AND NORMALISEDSURNAME NOT LIKE ''""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/normalized-appellation-surname/{NORMALISEDSURNAME}" ;
		rr:class cidoc:E81_Actor_Appellation, cidoc:E41_Appellation ; ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ rr:column "NORMALISEDSURNAME" ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Surname ;
	] ;
.

<#ForenameSurnamevariantCombined>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	SELECT 
		F.ID, 
		F.FORENAMEINTEXT, 
		S.SURNAMEVARIANT,
	    FROM (
		WITH RECURSIVE VARIANTSSPLITTED(ID, SURNAMEVARIANT, REST) AS (
			SELECT ID, NULL, SURNAMEVARIANTSINTEXTS || ';'
				FROM (SELECT ID, SURNAMEVARIANTSINTEXTS FROM DATA)
					WHERE SURNAMEVARIANTSINTEXTS IS NOT NULL
	  			UNION ALL
	  		  	SELECT ID, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM VARIANTSSPLITTED WHERE REST <> ''
		) SELECT ID, SURNAMEVARIANT FROM VARIANTSSPLITTED WHERE SURNAMEVARIANT IS NOT NULL) AS S
		INNER JOIN (SELECT ID, FORENAMEINTEXT FROM DATA) AS F ON S.ID = F.ID AND S.SURNAMEVARIANT NOT LIKE '' AND F.FORENAMEINTEXT IS NOT NULL""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/variant-appellation-surname-forename/{SURNAMEVARIANT}_{FORENAMEINTEXT}" ;
		rr:class cidoc:E81_Actor_Appellation, cidoc:E41_Appellation ; ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ rr:template "{SURNAMEVARIANT}, {FORENAMEINTEXT}" ; rr:termType rr:Literal ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:NameVariant ;
	] ;
.

<#Surnamevariants_without_forename>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	    WITH RECURSIVE VARIANTSSPLITTED2(ID, SURNAMEVARIANT, REST) AS (
			SELECT ID, NULL, SURNAMEVARIANTSINTEXTS || ';'
				FROM (SELECT ID, SURNAMEVARIANTSINTEXTS FROM DATA WHERE SURNAMEVARIANTSINTEXTS IS NOT NULL AND FORENAMEINTEXT IS NULL)
	  			UNION ALL
	  		  	SELECT ID, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM VARIANTSSPLITTED2 WHERE REST <> ''
		) SELECT ID, SURNAMEVARIANT FROM VARIANTSSPLITTED2 WHERE SURNAMEVARIANT IS NOT NULL AND SURNAMEVARIANT NOT LIKE ''""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/variant-appellation-surname/{SURNAMEVARIANT}" ;
		rr:class cidoc:E81_Actor_Appellation, cidoc:E41_Appellation ; ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ rr:template "{SURNAMEVARIANT}" ; rr:termType rr:Literal ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:NameVariant ;
	] ;
.

<#Occupation>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	    WITH RECURSIVE SPLITTEDOCCUPATION (ID, COUNTRY, STATUSOCCUPATION, REST) AS (
 			SELECT ID, COUNTRY, NULL, STATUSOCCUPATION || ';'
 				FROM (SELECT ID, COUNTRY, STATUSOCCUPATION FROM DATA) WHERE STATUSOCCUPATION IS NOT NULL
 	  			UNION ALL
 	  		  	SELECT ID, COUNTRY, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM SPLITTEDOCCUPATION WHERE REST <> ''
 		) SELECT
			ID, 
			CASE
				WHEN REGEXP_LIKE(STATUSOCCUPATION, '\\s+\\[\\w+\\]$') THEN REGEXP_REPLACE(STATUSOCCUPATION, '^.*\\s+\\[(\\w+)\\]$', '$1')
				ELSE COALESCE(COUNTRY, 'IE')
			END AS COUNTRY,
			REGEXP_REPLACE(STATUSOCCUPATION, '\\s+\\[\\w+\\]$', '') AS STATUSOCCUPATION   
		FROM SPLITTEDOCCUPATION WHERE STATUSOCCUPATION IS NOT NULL AND STATUSOCCUPATION NOT LIKE ''""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/occupation/{COUNTRY}/{STATUSOCCUPATION}" ;
		rr:class cidoc:E74_Group ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ rr:column "STATUSOCCUPATION" ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Occupation ; # Note that it is implied that this class is an subclass of cidoc:E55_Type
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P107_has_current_or_former_member ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P1_is_identified_by ;
		rr:objectMap [
			rr:parentTriplesMap <#OccupationAppellation> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
			rr:joinCondition [ rr:child "STATUSOCCUPATION" ; rr:parent "STATUSOCCUPATION" ; ] ;
		] ;
	] ;
.

<#OccupationAppellation>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	    WITH RECURSIVE SPLITTEDOCCUPATION (ID, COUNTRY, STATUSOCCUPATION, REST) AS (
 			SELECT ID, COUNTRY, NULL, STATUSOCCUPATION || ';'
 				FROM (SELECT ID, COUNTRY, STATUSOCCUPATION FROM DATA) WHERE STATUSOCCUPATION IS NOT NULL
 	  			UNION ALL
 	  		  	SELECT ID, COUNTRY, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM SPLITTEDOCCUPATION WHERE REST <> ''
 		) SELECT
			ID, 
			CASE
				WHEN REGEXP_LIKE(STATUSOCCUPATION, '\\s+\\[\\w+\\]$') THEN REGEXP_REPLACE(STATUSOCCUPATION, '^.*\\s+\\[(\\w+)\\]$', '$1')
				ELSE COALESCE(COUNTRY, 'IE')
			END AS COUNTRY,
		REGEXP_REPLACE(STATUSOCCUPATION, '\\s+\\[\\w+\\]$', '') AS STATUSOCCUPATION   
		FROM SPLITTEDOCCUPATION WHERE STATUSOCCUPATION IS NOT NULL AND STATUSOCCUPATION NOT LIKE ''""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/occupation-appellation/{COUNTRY}/{STATUSOCCUPATION}" ;
		rr:class cidoc:E41_Appellation ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ rr:column "STATUSOCCUPATION" ; ] ;
	] ;
.

<#Rank>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	    WITH RECURSIVE SPLITTEDRANK (ID, COUNTRY, STATUSRANK, REST) AS (
 			SELECT ID, COUNTRY, NULL, STATUSRANK || ';'
 				FROM (SELECT ID, COUNTRY, STATUSRANK FROM DATA) WHERE STATUSRANK IS NOT NULL
 	  			UNION ALL
 	  		  	SELECT ID, COUNTRY, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM SPLITTEDRANK WHERE REST <> ''
 		) SELECT 
			ID, 
			CASE
				WHEN REGEXP_LIKE(STATUSRANK, '\\s+\\[\\w+\\]$') THEN REGEXP_REPLACE(STATUSRANK, '^.*\\s+\\[(\\w+)\\]$', '$1')
				ELSE COALESCE(COUNTRY, 'IE')
			END AS COUNTRY,
			REGEXP_REPLACE(STATUSRANK, '\\s+\\[\\w+\\]$', '') AS STATUSRANK  
		FROM SPLITTEDRANK WHERE STATUSRANK IS NOT NULL AND STATUSRANK NOT LIKE ''""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/rank/{COUNTRY}/{STATUSRANK}" ;
		rr:class cidoc:E74_Group ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ rr:column "STATUSRANK" ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Rank ; # Note that it is implied that this class is an instance of cidoc:E55_Type
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P107_has_current_or_former_member ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P1_is_identified_by ;
		rr:objectMap [
			rr:parentTriplesMap <#RankAppellation> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
			rr:joinCondition [ rr:child "STATUSRANK" ; rr:parent "STATUSRANK" ; ] ;
		] ;
	] ;
.

<#RankAppellation>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	    WITH RECURSIVE SPLITTEDRANK (ID, COUNTRY, STATUSRANK, REST) AS (
 			SELECT ID, COUNTRY, NULL, STATUSRANK || ';'
 				FROM (SELECT ID, COUNTRY, STATUSRANK FROM DATA) WHERE STATUSRANK IS NOT NULL
 	  			UNION ALL
 	  		  	SELECT ID, COUNTRY, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM SPLITTEDRANK WHERE REST <> ''
 		) SELECT 
			ID, 
			CASE
				WHEN REGEXP_LIKE(STATUSRANK, '\\s+\\[\\w+\\]$') THEN REGEXP_REPLACE(STATUSRANK, '^.*\\s+\\[(\\w+)\\]$', '$1')
				ELSE COALESCE(COUNTRY, 'IE')
			END AS COUNTRY,
			REGEXP_REPLACE(STATUSRANK, '\\s+\\[\\w+\\]$', '') AS STATUSRANK  
		FROM SPLITTEDRANK WHERE STATUSRANK IS NOT NULL AND STATUSRANK NOT LIKE ''""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/rank-appellation/{COUNTRY}/{STATUSRANK}" ;
		rr:class cidoc:E41_Appellation ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ rr:column "STATUSRANK" ; ] ;
	] ;
.

<#Office>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	    WITH RECURSIVE SPLITTEDOFFICE (ID, COUNTRY, STATUSOFFICE, REST) AS (
 			SELECT ID, COUNTRY, NULL, STATUSOFFICE || ';'
 				FROM (SELECT ID, COUNTRY, STATUSOFFICE FROM DATA) WHERE STATUSOFFICE IS NOT NULL
 	  			UNION ALL
 	  		  	SELECT ID, COUNTRY, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM SPLITTEDOFFICE WHERE REST <> ''
 		) SELECT 
		 	ID, 
			CASE
				WHEN REGEXP_LIKE(STATUSOFFICE, '\\s+\\[\\w+\\]$') THEN REGEXP_REPLACE(STATUSOFFICE, '^.*\\s+\\[(\\w+)\\]$', '$1')
				ELSE COALESCE(COUNTRY, 'IE')
			END AS COUNTRY,
			REGEXP_REPLACE(STATUSOFFICE, '\\s+\\[\\w+\\]$', '') AS STATUSOFFICE 
		FROM SPLITTEDOFFICE WHERE STATUSOFFICE IS NOT NULL AND STATUSOFFICE NOT LIKE ''""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/office/{COUNTRY}/{STATUSOFFICE}" ;
		rr:class cidoc:E74_Group ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Office ; # Note that it is implied that this class is an instance of cidoc:E55_Type
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P107_has_current_or_former_member ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#Person>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """SELECT 
		ID,
		IFNULL(NORMALISEDSURNAME, ID) AS NORMALISEDSURNAME,
		IFNULL(NORMALISEDFORENAME, '-') AS NORMALISEDFORENAME,
		IFNULL(CENTURY, '0000') AS CENTURY,
		DISCRIMINATOR,
		CASEWHEN(GENDER='M', 'Male', CASEWHEN(GENDER='F', 'Female', NULL)) AS GENDER,
		COMMENT,
		SOURCEDOCUMENTIDFROMB2022DATABASE
		FROM DATA""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/person/{NORMALISEDSURNAME}_{NORMALISEDFORENAME}_{CENTURY}_{DISCRIMINATOR}" ;
		rr:class cidoc:E21_Person ;
	] ;
	
	rr:predicateObjectMap [
		rr:predicate cidoc:P1_is_identified_by ;
		rr:objectMap [
			rr:parentTriplesMap <#NormalizedAppellationsCombined> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
		rr:objectMap [
			rr:parentTriplesMap <#NormalizedAppellationsForename> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
		rr:objectMap [
			rr:parentTriplesMap <#NormalizedAppellationsSurname> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
		rr:objectMap [
			rr:parentTriplesMap <#ForenameSurnamevariantCombined> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
		rr:objectMap [
			rr:parentTriplesMap <#ForenameSurnamevariantCombined> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
		rr:objectMap [
			rr:parentTriplesMap <#Surnamevariants_without_forename> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
		rr:objectMap [
			rr:parentTriplesMap <#SOUBRIQUETALIAS> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
		rr:objectMap [
			rr:parentTriplesMap <#PATRONYMICSMATRONYMICS> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:objectMap [
			rr:template "https://ont.beyond2022.ie/ontology#{GENDER}" ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P70_documents ;
		rr:objectMap [
			rr:column "SOURCEDOCUMENTIDFROMB2022DATABASE" ;
			rr:termType rr:IRI ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P3_has_note ;
		rr:objectMap [
			rr:column "COMMENT" ;
			rr:datatype xsd:string ;
		] ;
	] ;
.

# ADMITTIDLY, THIS MAPPING IS VERY COMPLEX AS WE HAVE TO RECONSTRUCT URIS OF THE SPOUSE FOR THE MARRIAGE
# WE CAN VASTLY IMPROVE SPEEDS, IF NECESSARY, BY SPLITTING THIS INTO TWO QUERIES: ONE FOR EACH CASE
# 1) URI IN THE SPREADSHEET, OR 2) REFERENCE IN THE SPREADSHEET.
<#Marriage>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
		SELECT 
		WIFE.ID,
		IFNULL(WIFE.NORMALISEDSURNAME, WIFE.ID) AS 											W_S,
		IFNULL(WIFE.NORMALISEDFORENAME, '-') AS 											W_F,
		IFNULL(WIFE.CENTURY, '0000') AS														W_C,
		WIFE.DISCRIMINATOR AS																W_D,

		SPLITTED.KBWIFEOF,			
		CASEWHEN(REGEXP_LIKE(SPLITTED.KBWIFEOF, '^http(s)?://'), SPLITTED.KBWIFEOF, NULL) AS 		KBWIFEOFURI,

		-- IF URI
		--    IF B2022 URI, -> RETRIEVE SUFFIX
		--	  ELSE REUSE URI
		-- ELSE
		--    OF ENOUGH DATA FOR URI, USE THAT
		--    OTHERWISE USE LABEL FROM KBWIFEOF

		CASEWHEN(
			REGEXP_LIKE(SPLITTED.KBWIFEOF, '^http(s)?://'), 
			
			CASEWHEN(
				INSTR(SPLITTED.KBWIFEOF, 'https://kb.beyond2022.ie/person/'),
				REPLACE(SPLITTED.KBWIFEOF, 'https://kb.beyond2022.ie/person/', ''),
				SPLITTED.KBWIFEOF),
				 
			COALESCE(H_S || '_' || H_F || '_' || H_C || '_' || H_D, SPLITTED.KBWIFEOF)
		) AS 																				REMAINDER_OF_TEMPLATE

		FROM 
			DATA WIFE  
			
			-- THIS IS TO SPLIT THE MULTIPLE ENTRIES IN THE COLUMN WIFEOF
			LEFT JOIN (
				WITH RECURSIVE SPLITTEDKBWIFEOF (ID, KBWIFEOF, REST) AS (
					SELECT ID, NULL, KBWIFEOF || ';'
					FROM (
						SELECT ID, KBWIFEOF FROM DATA) WHERE KBWIFEOF IS NOT NULL
			 	  		UNION ALL
			 	  		SELECT ID, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM SPLITTEDKBWIFEOF WHERE REST <> ''
			 	) SELECT ID,KBWIFEOF FROM SPLITTEDKBWIFEOF WHERE KBWIFEOF IS NOT NULL AND KBWIFEOF NOT LIKE ''
			) SPLITTED ON WIFE.ID = SPLITTED.ID
			
			LEFT JOIN (
				SELECT
					ID,
					IFNULL(NORMALISEDSURNAME, ID) AS 											H_S,
					IFNULL(NORMALISEDFORENAME, '-') AS 											H_F,
					IFNULL(CENTURY, '0000') AS													H_C,
					DISCRIMINATOR AS															H_D,
				FROM DATA
			) HUSB ON SPLITTED.KBWIFEOF = HUSB.ID 
			
		WHERE SPLITTED.KBWIFEOF IS NOT NULL;
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/marriage/{W_S}_{W_F}_{W_C}_{W_D}_{REMAINDER_OF_TEMPLATE}" ;
		rr:class cidoc:E85_Joining ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P11_had_participant, b2022:of_wife ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
	
	rr:predicateObjectMap [
		rr:predicate cidoc:P11_had_participant, b2022:of_husband ;
		rr:objectMap [
			rr:column "KBWIFEOFURI" ;
			rr:termType rr:IRI ;
		] ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "KBWIFEOF" ; rr:parent "ID" ; ] ;
		] ;
		rr:objectMap [
			rr:parentTriplesMap <#BlankMen> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;		
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Marriage ;
	] ;
.

<#BlankMen>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
		SELECT 
		DATA.ID,
		CASEWHEN(REGEXP_LIKE(SPLITTED.KBWIFEOF, '^http(s)?://'), SPLITTED.KBWIFEOF, NULL) AS URI,
		CASEWHEN(REGEXP_LIKE(SPLITTED.KBWIFEOF, '^http(s)?://'), NULL, SPLITTED.KBWIFEOF) AS LABEL,		
		FROM DATA DATA
		LEFT JOIN (
			WITH RECURSIVE SPLITTEDKBWIFEOF2 (ID, KBWIFEOF, REST) AS (
				SELECT ID, NULL, KBWIFEOF || ';'
				FROM (
					SELECT ID, KBWIFEOF FROM DATA) WHERE KBWIFEOF IS NOT NULL
		 	  		UNION ALL
		 	  		SELECT ID, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM SPLITTEDKBWIFEOF2 WHERE REST <> ''
		 	) SELECT ID, KBWIFEOF FROM SPLITTEDKBWIFEOF2 WHERE KBWIFEOF IS NOT NULL AND KBWIFEOF NOT LIKE ''
		) SPLITTED ON DATA.ID = SPLITTED.ID
		WHERE NOT REGEXP_LIKE(SPLITTED.KBWIFEOF, '^https://kb.beyond2022.ie/person/') AND SPLITTED.KBWIFEOF NOT IN (SELECT ID FROM DATA)""" ] ;

	rr:subjectMap [
		rr:template "husband-{ID}" ;
		rr:termType rr:BlankNode ;
		rr:class cidoc:E21_Person ;
	] ;
	
	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [
			rr:column "LABEL" ;
		] ;
	] ;
	
	rr:predicateObjectMap [
		rr:predicate rdfs:seeAlso ;
		rr:objectMap [
			rr:column "URI" ; rr:termType rr:IRI ;
		] ;
	] ;
.

<#SOURCEDOCUMENTIDFROMB2022DATABASE> a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """SELECT SOURCEDOCUMENTIDFROMB2022DATABASE FROM DATA """ ] ;

	rr:subjectMap [
		rr:column "SOURCEDOCUMENTIDFROMB2022DATABASE" ;
		rr:class cidoc:E31_Document ;
	] ;
.

<#Career>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
		SELECT 
		ID,
		IFNULL(NORMALISEDSURNAME, ID) AS NORMALISEDSURNAME,
		IFNULL(NORMALISEDFORENAME, '-') AS NORMALISEDFORENAME,
		IFNULL(CENTURY, '0000') AS CENTURY,
		DISCRIMINATOR		
		FROM DATA WHERE FLORUITLOWER IS NOT NULL;""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/career/{NORMALISEDSURNAME}_{NORMALISEDFORENAME}_{CENTURY}_{DISCRIMINATOR}" ;
		rr:class cidoc:E89_Propositional_Object ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P4_has_time-span ;
		rr:objectMap [
			rr:parentTriplesMap <#CareerSpan> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to ;
		rr:objectMap [
			rr:parentTriplesMap <#Office> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Career ;
	] ;
.

<#CareerSpan>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """SELECT ID, FLORUITLOWER, FLORUITUPPER FROM DATA WHERE FLORUITLOWER IS NOT NULL;""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/time-span/{FLORUITLOWER}_{FLORUITUPPER}" ;
		rr:class cidoc:E52_Time-Span ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P82a_begin_of_the_begin, cidoc:P81a_end_of_the_begin ;
		rr:objectMap [ rr:column "FLORUITLOWER" ; rr:datatype xsd:date ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P81b_begin_of_the_end, cidoc:P82b_end_of_the_end ;
		rr:objectMap [ rr:column "FLORUITUPPER"  ; rr:datatype xsd:date ; ] ;
	] ;
.

<#ChiefGovernerFloruit>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
		SELECT 
		ID,
		IFNULL(NORMALISEDSURNAME, ID) AS NORMALISEDSURNAME,
		IFNULL(NORMALISEDFORENAME, '-') AS NORMALISEDFORENAME,
		IFNULL(CENTURY, '0000') AS CENTURY,
		DISCRIMINATOR		
		FROM DATA WHERE EARLIESTRECORD IS NOT NULL OR LATESTRECORDS IS NOT NULL;""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/chiefgovernerfloruit/{NORMALISEDSURNAME}_{NORMALISEDFORENAME}_{CENTURY}_{DISCRIMINATOR}" ;
		rr:class cidoc:E89_Propositional_Object ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P4_has_time-span ;
		rr:objectMap [
			rr:parentTriplesMap <#ChiefGovernerFloruitSpan> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to ;
		rr:objectMap [
			rr:parentTriplesMap <#ChiefGovernerOffice> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:ChiefGovernerOfIrelandFloruit ;
	] ;
.

<#ChiefGovernerFloruitSpan>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """SELECT ID, EARLIESTRECORD, LATESTRECORDS FROM DATA WHERE FLORUITLOWER IS NOT NULL;""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/time-span/{EARLIESTRECORD}_{LATESTRECORDS}" ;
		rr:class cidoc:E52_Time-Span ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P82a_begin_of_the_begin, cidoc:P81a_end_of_the_begin ;
		rr:objectMap [ rr:column "EARLIESTRECORD" ; rr:datatype xsd:date ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P81b_begin_of_the_end, cidoc:P82b_end_of_the_end ;
		rr:objectMap [ rr:column "LATESTRECORDS"  ; rr:datatype xsd:date ; ] ;
	] ;
.

<#ChiefGovernerOffice>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	    WITH RECURSIVE SPLITTEDCHIEFGOVERNEROFFICE (ID, CHIEFGOVERNOROFFICE, REST) AS (
 			SELECT ID, NULL, CHIEFGOVERNOROFFICE || ';'
 				FROM (SELECT ID, CHIEFGOVERNOROFFICE FROM DATA)
 					WHERE CHIEFGOVERNOROFFICE IS NOT NULL
 	  			UNION ALL
 	  		  	SELECT ID, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM SPLITTEDCHIEFGOVERNEROFFICE WHERE REST <> ''
 		) SELECT 
		 	ID, 
			CASEWHEN(REGEXP_LIKE(CHIEFGOVERNOROFFICE, '\\s+\\[\\w+\\]$'), REGEXP_REPLACE(CHIEFGOVERNOROFFICE, '^.*\\s+\\[(\\w+)\\]$', '$1'), 'IE') AS COUNTRY,
			REGEXP_REPLACE(CHIEFGOVERNOROFFICE, '\\s+\\[\\w+\\]$', '') AS CHIEFGOVERNOROFFICE 
		FROM SPLITTEDCHIEFGOVERNEROFFICE WHERE CHIEFGOVERNOROFFICE IS NOT NULL AND CHIEFGOVERNOROFFICE NOT LIKE ''""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/office/{COUNTRY}/{CHIEFGOVERNOROFFICE}" ;
		rr:class cidoc:E74_Group ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Office ; # Note that it is implied that this class is an instance of cidoc:E55_Type
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P107_has_current_or_former_member ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#SOUBRIQUETALIAS>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	    	WITH RECURSIVE SOUBRIQUETALIASSPLITTED(ID, SOUBRIQUETALIAS, REST) AS (
				SELECT ID, NULL, SOUBRIQUETALIAS || ';' FROM (SELECT ID, SOUBRIQUETALIAS FROM DATA WHERE SOUBRIQUETALIAS IS NOT NULL) 
	  			UNION ALL
	  			SELECT ID, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM SOUBRIQUETALIASSPLITTED WHERE REST <> ''
			) SELECT ID, SOUBRIQUETALIAS FROM SOUBRIQUETALIASSPLITTED WHERE SOUBRIQUETALIAS IS NOT NULL
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/soubriquet-alias/{SOUBRIQUETALIAS}" ;
		rr:class cidoc:E81_Actor_Appellation, cidoc:E41_Appellation ; ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ rr:column "SOUBRIQUETALIAS" ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:SoubriquetAlias ;
	] ;
.

<#PATRONYMICSMATRONYMICS>
	a rr:TriplesMap ;

	rr:logicalTable [ rr:sqlQuery """
	    	WITH RECURSIVE PATRONYMICSMATRONYMICSSPLITTED(ID, PATRONYMICSMATRONYMICS, REST) AS (
				SELECT ID, NULL, PATRONYMICSMATRONYMICS || ';' FROM (SELECT ID, PATRONYMICSMATRONYMICS FROM DATA WHERE PATRONYMICSMATRONYMICS IS NOT NULL) 
	  			UNION ALL
	  			SELECT ID, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM PATRONYMICSMATRONYMICSSPLITTED WHERE REST <> ''
			) SELECT ID, PATRONYMICSMATRONYMICS FROM PATRONYMICSMATRONYMICSSPLITTED WHERE PATRONYMICSMATRONYMICS IS NOT NULL
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/patronymicsmatronymics/{PATRONYMICSMATRONYMICS}" ;
		rr:class cidoc:E81_Actor_Appellation, cidoc:E41_Appellation ; ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ rr:column "PATRONYMICSMATRONYMICS" ; ] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:PatronymicsMatronymics ;
	] ;
.

<#PersonOrganization>
	a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """
	    	WITH RECURSIVE ORGANISATIONSPLITTED(ID, COUNTRY, ORGANISATION, REST) AS (
				SELECT ID, COUNTRY, NULL, ORGANISATION || ';' FROM (SELECT ID, COUNTRY, ORGANISATION FROM DATA WHERE ORGANISATION IS NOT NULL) 
	  			UNION ALL
	  			SELECT ID, COUNTRY, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM ORGANISATIONSPLITTED WHERE REST <> ''
			) SELECT 
				ID, 
				ORGANISATION,
				CASE
					WHEN REGEXP_LIKE(ORGANISATION, '\\s+\\[\\w+\\]$') THEN REGEXP_REPLACE(ORGANISATION, '^.*\\s+\\[(\\w+)\\]$', '$1')
					ELSE COALESCE(COUNTRY, 'IE')
				END AS COUNTRY,
			FROM ORGANISATIONSPLITTED WHERE ORGANISATION IS NOT NULL
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/organisation/{COUNTRY}/{ORGANISATION}" ;
		rr:class cidoc:E74_Group ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Organisation ;
	] ;
.

<#PersonOrganizationPropositionalObject>
	a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """
		SELECT
			D.ID,
			IFNULL(D.NORMALISEDSURNAME, D.ID) AS NORMALISEDSURNAME,
			IFNULL(D.NORMALISEDFORENAME, '-') AS NORMALISEDFORENAME,
			IFNULL(D.CENTURY, '0000') AS CENTURY,
			D.DISCRIMINATOR,
			E.ORGANISATION
		FROM DATA D
		JOIN (
			WITH RECURSIVE ORGANISATIONSPLITTED(ID, COUNTRY, ORGANISATION, REST) AS (
				SELECT ID, COUNTRY, NULL, ORGANISATION || ';' FROM (SELECT ID, COUNTRY, ORGANISATION FROM DATA WHERE ORGANISATION IS NOT NULL) 
	  			UNION ALL
	  			SELECT ID, COUNTRY, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM ORGANISATIONSPLITTED WHERE REST <> ''
			) SELECT ID, ORGANISATION FROM ORGANISATIONSPLITTED WHERE ORGANISATION IS NOT NULL
		) E WHERE D.ID = E.ID
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/person-organisation/{NORMALISEDSURNAME}_{NORMALISEDFORENAME}_{CENTURY}_{DISCRIMINATOR}-{ORGANISATION}" ;
		rr:class cidoc:E89_Propositional_Object ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:OrganisationRelationship ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to ;
		rr:objectMap [
			rr:parentTriplesMap <#PersonOrganization> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
			rr:joinCondition [ rr:child "ORGANISATION" ; rr:parent "ORGANISATION" ; ] ;
		] ;
	] ;
.

<#PersonPlace>
	a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """
	    	WITH RECURSIVE PLACESPLITTED(ID, COUNTRY, PLACE, REST) AS (
				SELECT ID, COUNTRY, NULL, PLACE || ';' FROM (SELECT ID, COUNTRY, PLACE FROM DATA WHERE PLACE IS NOT NULL) 
	  			UNION ALL
	  			SELECT ID, COUNTRY, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM PLACESPLITTED WHERE REST <> ''
			) SELECT 
				ID, 
				PLACE,
				CASE
					WHEN REGEXP_LIKE(PLACE, '\\s+\\[\\w+\\]$') THEN REGEXP_REPLACE(PLACE, '^.*\\s+\\[(\\w+)\\]$', '$1')
					ELSE COALESCE(COUNTRY, 'IE')
				END AS COUNTRY
				FROM PLACESPLITTED WHERE PLACE IS NOT NULL
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/place/{COUNTRY}/{PLACE}" ;
		rr:class cidoc:E53_Place ;
	] ;
.

<#PersonPlacePropositionalObject>
	a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """
		SELECT
			D.ID,
			IFNULL(D.NORMALISEDSURNAME, D.ID) AS NORMALISEDSURNAME,
			IFNULL(D.NORMALISEDFORENAME, '-') AS NORMALISEDFORENAME,
			IFNULL(D.CENTURY, '0000') AS CENTURY,
			D.DISCRIMINATOR,
			E.PLACE
		FROM DATA D
		JOIN (
	    	WITH RECURSIVE PLACESPLITTED(ID, COUNTRY, PLACE, REST) AS (
				SELECT ID, COUNTRY, NULL, PLACE || ';' FROM (SELECT ID, COUNTRY, PLACE FROM DATA WHERE PLACE IS NOT NULL) 
	  			UNION ALL
	  			SELECT ID, COUNTRY, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM PLACESPLITTED WHERE REST <> ''
			) SELECT ID, PLACE FROM PLACESPLITTED WHERE PLACE IS NOT NULL
		) E WHERE D.ID = E.ID
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/person-place/{NORMALISEDSURNAME}_{NORMALISEDFORENAME}_{CENTURY}_{DISCRIMINATOR}-{PLACE}" ;
		rr:class cidoc:E89_Propositional_Object ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:PlaceRelationship ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P67_refers_to ;
		rr:objectMap [
			rr:parentTriplesMap <#PersonPlace> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
			rr:joinCondition [ rr:child "PLACE" ; rr:parent "PLACE" ; ] ;
		] ;
	] ;
.

<#MEMBEROFCHURCH>
	a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """
	    	WITH RECURSIVE MEMBEROFCHURCHSPLITTED(ID, COUNTRY, MEMBEROFCHURCH, REST) AS (
				SELECT ID, COUNTRY, NULL, MEMBEROFCHURCH || ';' FROM (SELECT ID, COUNTRY, MEMBEROFCHURCH FROM DATA WHERE MEMBEROFCHURCH IS NOT NULL) 
	  			UNION ALL
	  			SELECT ID, COUNTRY, TRIM(SUBSTR(REST, 0, INSTR(REST, ';') - 1)), SUBSTR(REST, INSTR(REST, ';') + 1) FROM MEMBEROFCHURCHSPLITTED WHERE REST <> ''
			) SELECT 
				ID, 
				MEMBEROFCHURCH,
				CASE
					WHEN REGEXP_LIKE(MEMBEROFCHURCH, '\\s+\\[\\w+\\]$') THEN REGEXP_REPLACE(MEMBEROFCHURCH, '^.*\\s+\\[(\\w+)\\]$', '$1')
					ELSE COALESCE(COUNTRY, 'IE')
				END AS COUNTRY
				FROM MEMBEROFCHURCHSPLITTED WHERE MEMBEROFCHURCH IS NOT NULL
	""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/organisation/{COUNTRY}/{MEMBEROFCHURCH}" ;
		rr:class cidoc:E74_Group ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P2_has_type ;
		rr:object b2022:Organisation ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P107_has_current_or_former_member ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.


<#CITATION1URI>
a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """SELECT ID, CITATION1 FROM DATA WHERE REGEXP_LIKE(CITATION1, '^http(s)?://')""" ] ;

	rr:subjectMap [
		rr:column "CITATION1" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#CITATION1TEXT>
a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """SELECT ID, CITATION1 FROM DATA WHERE CITATION1 IS NOT NULL AND NOT REGEXP_LIKE(CITATION1, '^http(s)?://')""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/reference/{CITATION1}" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ 
			rr:column "CITATION1" ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#CITATION2URI>
a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """SELECT ID, CITATION2 FROM DATA WHERE REGEXP_LIKE(CITATION2, '^http(s)?://')""" ] ;

	rr:subjectMap [
		rr:column "CITATION2" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#CITATION2TEXT>
a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """SELECT ID, CITATION2 FROM DATA WHERE CITATION2 IS NOT NULL AND NOT REGEXP_LIKE(CITATION2, '^http(s)?://')""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/reference/{CITATION2}" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ 
			rr:column "CITATION2" ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#CITATION3URI>
a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """SELECT ID, CITATION3 FROM DATA WHERE REGEXP_LIKE(CITATION3, '^http(s)?://')""" ] ;

	rr:subjectMap [
		rr:column "CITATION3" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.

<#CITATION3TEXT>
a rr:TriplesMap ;
	rr:logicalTable [ rr:sqlQuery """SELECT ID, CITATION3 FROM DATA WHERE CITATION3 IS NOT NULL AND NOT REGEXP_LIKE(CITATION3, '^http(s)?://')""" ] ;

	rr:subjectMap [
		rr:template "https://kb.beyond2022.ie/reference/{CITATION3}" ;
		rr:class cidoc:E32_Authority_Document ;
	] ;

	rr:predicateObjectMap [
		rr:predicate rdfs:label ;
		rr:objectMap [ 
			rr:column "CITATION3" ;
		] ;
	] ;

	rr:predicateObjectMap [
		rr:predicate cidoc:P71_lists ;
		rr:objectMap [
			rr:parentTriplesMap <#Person> ;
			rr:joinCondition [ rr:child "ID" ; rr:parent "ID" ; ] ;
		] ;
	] ;
.